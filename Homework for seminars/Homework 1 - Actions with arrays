#include<iostream>
#include<cassert>

void allocateMemory(int*& array, size_t capacity){
	assert(capacity > 0)
	assert(array == nullptr)
	array = new int[capacity];
	size=0;
}

void freeMemory(int*& array, size_t& size, size_t& capacity) {
	delete[] array;
	array = nullptr;
	size = 0;
	capacity = 0;
}

bool resizeAndReallocate(int*& array, size_t size, size_t& capacity) { //split reallocate and resize
	//size_t newCapacity = capacity * 2; -> resize
	assert(newCapacity > 0); // reallocate
	assert(size < newCapacity); //reallocate
	
	//int* newArray = nullptr;
	/*try {
		newArray = new (std::nothrow) int[newCapacity];
	}
	catch(const std::exception&) {
		return false;
	}*/
	
	int* newArray = newArray = new (std::nothrow) int[newCapacity]; //reallocate
	if(newArray = nullptr) { 
		return false; //reallocate
	}
	
	for(int i = 0; i < size; i++) {
		newArray[i] = array[i]; //reallocate
	}

	delete[] array; //reallocate
	array = newArray; //reallocate

	return true;//reallocate
}

bool addElement(int*& array, size_t& size, size_t& capacity, int newElem) {
	if (size == capacity) {
		resize(array, size, capacity);
		array[size++] = newElem;
	}
	else {
		array[size++] = newElem;
	}

	return array;
}

bool addElement(int*& array, size_t& size, size_t& capacity, int newElem, size_t position) {
	if (size + 1 > capacity) {
		resize(array, size, capacity);
		for (int i = capacity; i >= position; i--) {
			array[i] = array[i - 1];

		}
		array[position - 1] = newElem;
	}
	else {
		for (int i = capacity; i >= position; i--) {
			array[i] = array[i - 1];

		}
		array[position - 1] = newElem;
	}

	return array;
}

void print(const int* array, size_t size, size_t capacity) {
	for (int i = 0; i < size; i++) {
		std::cout << array[i] + " ";
	}
}

bool removeElement(int*& array, size_t& size, size_t& capacity, size_t position) {
	for (int i = 0; i < size; i++) {
		
	}
}

int main()
{
	// dynamically allocated array which can be resized
	int* array{ nullptr };

	// capacity of the array
	size_t capacity = 3;

	// exact number of elements in the array
	size_t size = 0;

	allocateMemory(array, capacity);

	addElement(array, size, capacity, 1);
	addElement(array, size, capacity, 2);
	addElement(array, size, capacity, 3);

	std::cout << "The capacity of the array is " << capacity << std::endl;
	std::cout << "The real count of the elements in the array is " << size << std::endl;
	print(array, size, capacity);

	addElement(array, size, capacity, 4, 2);

	std::cout << "\nThe capacity of the array is " << capacity << std::endl;
	std::cout << "The real count of the elements in the array is " << size << std::endl;
	print(array, size, capacity);

	removeElement(array, size, capacity, 0);
	removeElement(array, size, capacity, 0);
	removeElement(array, size, capacity, 0);

	std::cout << "\nThe capacity of the array is " << capacity << std::endl;
	std::cout << "The real count of the elements in the array is " << size << std::endl;

	print(array, size, capacity);

	//freeMemory(array, size, capacity);
}
